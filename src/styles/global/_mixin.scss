@use "sass:math";
@use "sass:map";
@use "config";
@use "function" as func;

// メディアクエリ
//-------------------------------------------
@mixin mq($breakpoint) {
    @media #{map.get(config.$breakpoints, $breakpoint)} {
        @content;
    }
}


// 矢印「>」
//-------------------------------------------
@mixin arrow($direction: 'right', $size: null, $weight: 2px, $color: func.color('base'), $round: false, $skew: false) {
    // $direction: 上下左右 'top', 'right', 'bottom', 'left' 
    // $size: 長さ
    // $weight: 太さ
    // $color: 色
    // $round: 端を丸める 使用する場合true (before領域とafter領域を使用します)
    // $skew: ボーダーの角度を変更 使用する場合degを指定 roundがtrueの場合は使用不可

    width: 1em;  
    height: 1em;
    font-size: $size; 
    
    // roundなし
    @if ($round == false) {
        border-top-style: solid;
        border-left-style: solid;
        border-width: $weight;
        border-color: $color;
    }
    
    // roundあり
    @else {
        &::before, &::after {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            background-color: $color;
            border-radius: math.div($weight, 2);
        }

        &::before {
            width: $weight;
            height: 100%;
        }

        &::after {
            width: 100%;
            height: $weight;
        }     
    }

    // 向きと角度の対応付け
    $to_map: (
        'top': 45deg,
        'right': 135deg,
        'bottom': -135deg,
        'left': -45deg,
    );

    @each $to, $deg in $to_map  {
        @if ($direction == $to) {
            rotate: $deg;

            // skewあり
            @if ($skew == true) {
                skew: ($skew, $skew);
            }
        }
    }
}


// バツアイコン
//-------------------------------------------
@mixin close_icon($size: 35px, $weight: 2px, $color: config.$color_base) {
    // $size: 長さ
    // $width: 太さ
    // $height: 色

    display: block;
    width: $size;
    height: $size;

    &::before, &::after { 
        content: ""; 
        position: absolute;
        inset: 0;
        width: $size; 
        height: $weight; 
        margin: auto; 
        background-color: $color; 
    }

    &::before { 
        rotate: 45deg; 
    } 
    
    &::after { 
        rotate: 135deg; 
    }
}


// 三角形
//-------------------------------------------
@mixin triangle($direction: 'right', $width: 30px, $height: 30px, $color: func.color('base')) {
    // $direction: 三角形の方向 (例えばtopなら上、right-topなら右上という感じで8方向あります)
    // $width: 横幅
    // $height: 高さ
    // $color: 色

    display: block;
    width: $width;
    height: $height;
    background-color: $color;

    @if ($direction == 'top') {
        clip-path: polygon(50% 0%, 0% 100%, 100% 100%);
    }
    
    @if ($direction == 'right-top') {
        clip-path: polygon(100% 0, 100% 100%, 0 0);
    }
    
    @if ($direction == 'right') {
        clip-path: polygon(100% 50%, 0 100%, 0 0);
    }
    
    @if ($direction == 'right-bottom') {
        clip-path: polygon(100% 0, 100% 100%, 0 100%);
    }
    
    @if ($direction == 'bottom') {
        clip-path: polygon(100% 0, 50% 100%, 0 0);
    }
    
    @if ($direction == 'left-bottom') {
        clip-path: polygon(0 0, 100% 100%, 0 100%);
    }
    
    @if ($direction == 'left') {
        clip-path: polygon(100% 0, 0 50%, 100% 100%);
    }
    
    @if ($direction == 'left-top') {
        clip-path: polygon(0 0, 0 100%, 100% 0);
    }
}

// 点線（linear-gradient）
//-------------------------------------------------------------------
@mixin linear_dots($direction: 'x', $color: func.color('base'), $length: 2px, $weight: 1px, $gap: 6px) {
    // $direction: 方向 (x: 横、y: 縦)
    // $color: 色
    // $length: 点線の長さ
    // $weight: 点線の太さ
    // $gap: 間隔
    // $round: 丸くするかどうか

    $to: '';
    $width: 0;
    $height: 0;
    $bg_size: 0;
    
    // 横方向
    @if ($direction == 'x') {
        $to: to right;
        $width: 100%;
        $height: $weight;
        $bg_size: ($length + $gap) $height;
        
        // 縦方向
    } @else if ($direction == 'y') {
        $to: to bottom;
        $width: $weight;
        $height: 100%;
        $bg_size: $height ($length + $gap);
    
    // それ以外
    } @else {
        @error '$directionは"x"か"y"を指定してください。';
    }

    width: $width;
    height: $height;
    background: linear-gradient($to, $color, $color $gap, transparent $gap, transparent $length + $gap) repeat center/ $bg_size;
}
